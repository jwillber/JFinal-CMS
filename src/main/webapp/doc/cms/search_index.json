[{"path":"1.Cms概述.md","content":"Cms内容管理系统，极速开发，自定义模型，自定义字段，多站点，一键生成模板代码，让您轻松打造自己的独立网站，同时也方便二次开发，让您快速搭建个性化独立网站，为您节约更多时间，去陪恋人、家人和朋友。\n演示地址:http://cms.jrecms.com\n后台地址: http://cms.jrecms.com/admin/login\n账号:admin 密码:123456\nQQ交流群:575535321","title":"1.Cms概述"},{"path":"1.1技术框架.md","content":"MVC:JFinal\nJFinal 是基于Java 语言的极速 web 开发框架，其核心设计目标是开发迅速、代码量少、学习简单、功能强大、轻量级、易扩展、Restful。在拥有Java语言所有优势的同时再拥有ruby、python等动态语言的开发效率。\n页面:JFinal Template\nJFinal Template Engine 采用独创的 DKFF (Dynamic Key Feature Forward)词法分析算法以及独创的DLRD (Double Layer Recursive Descent)语法分析算法，极大减少了代码量，降低了学习成本，并提升了用户体验。\n缓存:EhCache\nEhCache 是一个纯Java的进程内缓存框架，具有快速、精干等特点\n数据库:Mysql","title":"1.1技术框架"},{"path":"1.2代码介绍.md","content":"![](images/screenshot_1547445771747.png)\nautocode:自动生成代码\nconfig:程序配置\ncontroller:控制器\nentity:实体\nfilter:过滤器\nhandler:自定义JFinal Handler\nroutes:路由\ntemplate:模板\nutil:工具类","title":"1.2代码介绍"},{"path":"1.3后台功能.md","content":"模型管理\n![](images/screenshot_1547448245537.png)\n栏目管理\n![](images/screenshot_1547447971033.png)\n内容管理\n![](images/screenshot_1547447984640.png)\n表单管理\n![](images/screenshot_1547448050615.png)\n自定义表管理\n![](images/screenshot_1547448273568.png)\n广告\n![](images/screenshot_1547448332932.png)\n广告位\n![](images/screenshot_1547448342013.png)\n友情链接\n![](images/screenshot_1547448348902.png)\n管理员\n![](images/screenshot_1547448411102.png)\n站点管理\n![](images/screenshot_1547448420248.png)\n系统配置\n![](images/screenshot_1547448433625.png)\n模板\n![](images/screenshot_1547448442199.png)\n清除缓存\n![](images/screenshot_1547448454328.png)\n数据库\n![](images/screenshot_1547448470687.png)\n\n\n\n","title":"1.3后台功能"},{"path":"1.4配置文件.md","content":"config.properties:数据库配置文件\nehcache.xml:EhCache缓存配置文件\nlog4j.properties:日志配置文件","title":"1.4配置文件"},{"path":"2.快速开始.md","content":"[2.1环境文件](2.1%E7%8E%AF%E5%A2%83%E6%96%87%E4%BB%B6.md)\n[2.2导入项目](2.2%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE.md)\n[2.3运行项目](2.3%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE.md)\n","title":"2.快速开始"},{"path":"2.1环境文件.md","content":"32位环境：\nJDK1.8: https://pan.baidu.com/s/1Nz-qiOPMcLH59pCXTWvEaA\nTomcat8:https://pan.baidu.com/s/1n1GNkABh3Vhoorf0NYvwjw\nMysql5.6:https://pan.baidu.com/s/1oHEmZ24v6Ko07P5pLUvrtQ\n64位环境：\nJDK1.8: https://pan.baidu.com/s/1mxSU5wysO90wXTb7mTIL-w\nTomcat8:https://pan.baidu.com/s/1BNXibmA6JwXqcm3heiVc5w\nMysql5.6:https://pan.baidu.com/s/1XmBxc0J4J1ZbmVuSIUJrLQ\n数据库工具\nnavicat:https://pan.baidu.com/s/1fEkwDa6Ok_z5l2EuTxKjGw\nmysql初始化bat:https://pan.baidu.com/s/1goMQGsGs_bAnjCmiw5oQeg","title":"2.1环境文件"},{"path":"2.2导入项目.md","content":"在File->Import中选择Maven->Existing Maven Projects即可导入项目。\n![](images/screenshot_1547445623412.png)\n![](images/screenshot_1547445589156.png)\n导入后项目展示如下\n![](images/screenshot_1547445771747.png)","title":"2.2导入项目"},{"path":"2.3运行项目.md","content":"Cms集成了jetty，直接运行CmsConfig类，程序就跑起来了。\n![](images/screenshot_1547446285961.png)\n控制台会有如下打印\n![](images/screenshot_1547446313239.png)","title":"2.3运行项目"},{"path":"3.模板标签.md","content":"[3.1广告位](3.1%E5%B9%BF%E5%91%8A%E4%BD%8D.md)\n[3.2子栏目列表](3.2%E5%AD%90%E6%A0%8F%E7%9B%AE%E5%88%97%E8%A1%A8.md)\n[3.3单个栏目](3.3%E5%8D%95%E4%B8%AA%E6%A0%8F%E7%9B%AE.md)\n[3.4父栏目列表](3.4%E7%88%B6%E6%A0%8F%E7%9B%AE%E5%88%97%E8%A1%A8.md)\n[3.5根栏目列表](3.5%E6%A0%B9%E6%A0%8F%E7%9B%AE%E5%88%97%E8%A1%A8.md)\n[3.6单个内容](3.6%E5%8D%95%E4%B8%AA%E5%86%85%E5%AE%B9.md)\n[3.7内容列表](3.7%E5%86%85%E5%AE%B9%E5%88%97%E8%A1%A8.md)\n[3.8友情链接列表](3.8%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5%E5%88%97%E8%A1%A8.md)\n[3.9分页](3.9%E5%88%86%E9%A1%B5.md)\n[3.10SQL列表](3.10SQL%E5%88%97%E8%A1%A8.md)\n[3.11内容分页](3.11%E5%86%85%E5%AE%B9%E5%88%86%E9%A1%B5.md)\n","title":"3.模板标签"},{"path":"3.1广告位.md","content":"（1）：广告位标签#ad_position参数有\nid:广告位ID（必传）（Int）\n（2）：返回变量对象\nadPosition:广告位\n```\n#ad_position(id=\"1\")\n#for(ad : adPosition.ads)\n<li><a href=\"javascript:;\" target=\"_blank\"><img src=\"#(ad.image)\" /></a></li>\n#end\n#end\n```","title":"3.1广告位"},{"path":"3.2子栏目列表.md","content":"（1）：子栏目列表标签#category_children_list参数有\ncategoryId:栏目ID（必传） （Int）\nisMenu：是否是菜单 （Boolean）\nrecursive：是否递归  （Boolean）\nstart：起始位置 （Int）\ncount：数量 （Int）\n（2）：返回变量对象\ncategorys：栏目列表\n```\n#category_children_list(categoryId=\"1\")\n#for(category : categorys)\n<li><s></s><a class=\"select\" href=\"#(category.path)\">#(category.name)</a></li>\n#end\n#end\n```","title":"3.2子栏目列表"},{"path":"3.3单个栏目.md","content":"（1）：单个栏目标签#category参数有\nid:栏目ID（必传）（Int）\n（2）：返回变量对象\ncategory：栏目\n```\n#category(id=\"1\")\n<h3>#(category.name)</h3>\n#end\n```","title":"3.3单个栏目"},{"path":"3.4父栏目列表.md","content":"（1）：父栏目列表标签#category_parent_list参数有\ncategoryId:栏目ID（必传） （Int）\nisMenu：是否是菜单 （Boolean）\nrecursive：是否递归  （Boolean）\nstart：起始位置 （Int）\ncount：数量 （Int）\n（2）：返回变量对象\ncategorys：栏目列表\n```\n#category_parent_list(categoryId=\"1\")\n#for(category : categorys)\n<li><s></s><a class=\"select\" href=\"#(category.path)\">#(category.name)</a></li>\n#end\n#end\n```","title":"3.4父栏目列表"},{"path":"3.5根栏目列表.md","content":"（1）：根栏目列表标签#category_root_list参数有\nisMenu：是否是菜单 （Boolean）\nmodelId：模型ID （Int）\n（2）：返回变量对象\ncategorys：栏目列表\n```\n#category_root_list()\n#for(category : categorys)\n<a href=\"#(category.path)\">#(category.name)</a>\n#end\n#end\n```","title":"3.5根栏目列表"},{"path":"3.6单个内容.md","content":"（1）：单个内容标签#content参数有\nid:内容ID（必传） （Int）\n（2）：返回变量对象\ncontent：内容\n```\n#content(id=\"1\")\n<h3>#(content.title)</h3>\n#end\n```","title":"3.6单个内容"},{"path":"3.7内容列表.md","content":"（1）：内容列表标签#content_list参数有\ncategoryId:栏目ID（必传）（Int）\ntype：类型（Int）\nstart：起始位置（Int）\ncount：数量（Int）\ncondition：SQL条件（String）\norderBy：排序SQL（String）\n（2）：返回变量对象\ncontents：内容列表\n```\n#content_list(categoryId=\"1\",count=5)\n#for(content : contents)\n<div class=\"newsfocus\">\n    <div><a href=\"#(content.path)\"><img src=\"#(content.image)\" /></a></div>\n    <h3><a href=\"#(content.path)\" title=\"#(content.title)\">#(abbreviate(content.title,34,\"...\"))</a></h3>\n    <p>#(abbreviate(content.text,34,\"...\"))</p>\n</div>\n#end\n#end\n```","title":"3.7内容列表"},{"path":"3.8友情链接列表.md","content":"（1）：友情链接列表标签#friend_link_list参数有\nstart：起始位置（Int）\ncount：数量（Int）\norderBy：排序SQL（String）\n（2）：返回变量对象\nfriendLinks：友情链接列表\n```\n#friend_link_list()\n#for(friendLink : friendLinks)\n<a href=\"#(friendLink.url)\" target=\"_blank\">#(friendLink.name)</a>\n#end\n#end\n```","title":"3.8友情链接列表"},{"path":"3.9分页.md","content":"（1）：分页标签#pagination参数有\npattern：模式（String）\npageNumber：页码（Int）\ntotalPages：总页数（Int）\nsegmentCount：中间段页码数（Int）\n（2）：返回变量对象\npattern：模式\npageNumber：页码\ntotalPages：总页数\nsegmentCount：中间段页码数\nhasPrevious：是否存在上一页\nhasNext：是否存在下一页\nisFirst：是否为首页\nisLast：是否为末页\npreviousPageNumber：上一页页码\nnextPageNumber：下一页页码\nfirstPageNumber：首页页码\nlastPageNumber：末页页码\nsegment：中间段页码\n```\n#pagination(pageNumber = contentPage.pageNumber,totalPages = contentPage.totalPage,pattern = currentCategory.path+\"?pageNumber=\")\n<div class=\"pageBtn\">\n#if(totalPages>1)    \n    #if(hasPrevious)\n        <a href=\"#(pattern)#(previousPageNumber)\" class=\"page_prev\">上一页</a>\n    #else\n        <a href=\"javascript:;\" class=\"page_prev on\">上一页</a>\n    #end\n    #for(segmentPageNumber : segment)\n        #if(segmentPageNumber != pageNumber)\n            <a href=\"#(pattern)#(segmentPageNumber)\">#(segmentPageNumber)</a>\n        #else\n            <a href=\"javascript:;\" class=\"page_num on\">#(segmentPageNumber)</a>\n        #end\n    #end\n    #if(hasNext)\n        <a href=\"#(pattern)#(nextPageNumber)\" class=\"page_next\">下一页</a>\n    #else\n        <a href=\"javascript:;\" class=\"page_next on\">下一页</a>\n    #end\n#end \n</div>\n#end\n```","title":"3.9分页"},{"path":"3.10SQL列表.md","content":"（1）：SQL标签#sql_list参数有\nsql：SQL（String）\n（2）：返回变量对象\nrecords：记录列表\n```\n#sql(sql=\"select * from cms_friend_link\")\n#for(record : records)\n#(record.name)\n#end\n#end\n```","title":"3.10SQL列表"},{"path":"3.11内容分页.md","content":"（1）：内容分页标签#content_page参数有\ncategoryId:栏目ID（必传）（Int）\ntype：类型（Int）\nkeyword：搜索词（String）\npageNumber：页码（Int）\npageSize：每页记录数（Int）\nstart：起始位置（Int）\ncount：数量（Int）\ncondition：SQL条件（String）\norderBy：排序SQL（String）\n（2）：返回变量对象\ncontentPage：内容分页\n```\n#content_page(categoryId = currentCategory.id,pageNumber = pageNumber,pageSize = 9)\r\n<ul class=\"noborder\">\r\n#for(content : contentPage.list)\r\n<li>\n    <span class=\"date\">#date(content.createDate,\"yyyy-MM-dd\")</span>\n     <a href=\"#(content.path)\">· #(content.title)</ a>\n</li>\r\n#end\r\n</ul>\r\n<div class=\"listpage\" >\r\n\t#pagination(pageNumber = contentPage.pageNumber,totalPages = contentPage.totalPage,pattern = currentCategory.path+\"?pageNumber=\")\r\n\t\t#include(\"page.html\")\r\n\t #end\r\n</div>\r\n#end\n```","title":"3.11内容分页"},{"path":"4.帮助文档.md","content":"[4.1Ehcache页面缓存](4.1Ehcache%E9%A1%B5%E9%9D%A2%E7%BC%93%E5%AD%98.md)\n[4.2Excel文件生成并下载](4.2Excel%E6%96%87%E4%BB%B6%E7%94%9F%E6%88%90%E5%B9%B6%E4%B8%8B%E8%BD%BD.md)\n[4.2文件存储](4.2%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8.md)\n[4.3自动生成数据库表](4.3%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8.md)\n[4.4防跨域过滤器](4.4%E9%98%B2%E8%B7%A8%E5%9F%9F%E8%BF%87%E6%BB%A4%E5%99%A8.md)\n[4.5伪静态](4.5%E4%BC%AA%E9%9D%99%E6%80%81.md)\n","title":"4.帮助文档"},{"path":"4.1Ehcache页面缓存.md","content":"(1) pom.xml\n```\n<dependency>\n    <groupId>net.sf.ehcache</groupId>\n    <artifactId>ehcache-web</artifactId>\n    <version>2.0.4</version>\n</dependency>\n```\n(2) ehcache.xml\n```\n<cache name=\"SimplePageCachingFilter\" \n       maxElementsInMemory=\"1000\" \n       timeToIdleSeconds=\"3600\" \n       timeToLiveSeconds=\"86400\" \n       eternal=\"false\" \n       overflowToDisk=\"true\" />\n```\n```\nname:缓存名称。 \nmaxElementsInMemory：缓存最大个数。 \neternal:对象是否永久有效，一但设置了，timeout将不起作用。 \ntimeToIdleSeconds：设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。 \ntimeToLiveSeconds：设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。 \noverflowToDisk：当内存中对象数量达到maxElementsInMemory时，Ehcache将会对象写到磁盘中。 \ndiskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。 \nmaxElementsOnDisk：硬盘最大缓存个数。 \ndiskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.\ndiskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。 \nmemoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。 \nclearOnFlush：内存数量最大时是否清除。\n```\n(3) web.xml\n配置代码放在JFinal过滤器的上面\n```\n<!--ehcache 页面缓存过滤器 -->\n<filter>\n<filter-name>PageCachingFilter</filter-name>\n<filter-class>net.sf.ehcache.constructs.web.filter.SimplePageCachingFilter</filter-class>\n<init-param>\n<param-name>cacheName</param-name>\n<param-value>SimplePageCachingFilter</param-value>\n</init-param>\n</filter>\n<filter-mapping>\n<filter-name>PageCachingFilter</filter-name>\n<url-pattern>/</url-pattern>\n</filter-mapping>\n\n<filter-mapping>\n<filter-name>PageCachingFilter</filter-name>\n<url-pattern>/content/*</url-pattern>\n</filter-mapping>\n\n<filter-mapping>\n<filter-name>PageCachingFilter</filter-name>\n<url-pattern>/category/*</url-pattern>\n</filter-mapping>\n```\n","title":"4.1Ehcache页面缓存"},{"path":"4.2Excel文件生成并下载.md","content":"```\n/**\n * 下载优惠码\n */\npublic void download() {\n    Long id = getParaToLong(\"id\");\n    Integer count = getParaToInt(\"count\");\n    if (count == null || count <= 0) {\n        count = 100;\n    }\n    Coupon coupon = Coupon.dao.findById(id);\n    List<CouponCode> data = CouponCode.dao.generate(coupon, null, count);\n    String filename = \"coupon_code_\" + DateFormatUtils.format(new Date(), \"yyyyMM\") + \".xls\";\n    String[] contents = new String[4];\n    contents[0] = \"优惠券\" + \": \" + coupon.getName();\n    contents[1] = \"生成数量\" + \": \" + count;\n    contents[2] = \"操作员\" + \": \" + getCurrentAdmin().getUsername();\n    contents[3] = \"生成日期\" + \": \" + DateFormatUtils.format(new Date(), \"yyyy-MM-dd HH:mm:ss\");\n    try {\n        new ExcelView(filename, null, new String[] { \"code\" }, new String[] { \"优惠码\" }, null, null, data, contents).buildExcelDocument(getRequest(), getResponse());\n        renderNull();\n    } catch (Exception e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n}\n```","title":"4.2Excel文件生成并下载"},{"path":"4.2文件存储.md","content":"[4.2.1OSS](4.2.1OSS.md)\n[4.2.2FTP](4.2.2FTP.md)\n","title":"4.2文件存储"},{"path":"4.2.1OSS.md","content":"```\npackage com.cms.util;\r\nimport java.io.BufferedInputStream;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.InputStream;\r\nimport org.apache.commons.io.IOUtils;\r\nimport org.apache.commons.lang.StringUtils;\r\nimport com.aliyun.oss.OSSClient;\r\nimport com.aliyun.oss.model.ObjectMetadata;\r\n/**\r\n *\r\n * OSS 工具类\r\n */\r\npublic class OSSUtils {\r\n\r\n    public static void upload(String path, File file, String contentType){\r\n        String endpoint = \"http://oss-cn-hangzhou.aliyuncs.com\";    // Endpoint以杭州为例，其它Region请按实际情况填写。\r\n        String accessId = \"\";    //AccessKey ID \r\n        String accessKey = \"\";   //Access Key Secret    \r\n        String bucketName = \"\";  //桶名称\r\n        InputStream inputStream = null;\r\n        try {\r\n            inputStream = new BufferedInputStream(new FileInputStream(file));\r\n            OSSClient ossClient = new OSSClient(endpoint, accessId, accessKey);\r\n            ObjectMetadata objectMetadata = new ObjectMetadata();\r\n            objectMetadata.setContentType(contentType);\r\n            objectMetadata.setContentLength(file.length());\r\n            ossClient.putObject(bucketName, StringUtils.removeStart(path, \"/\"), inputStream, objectMetadata);\r\n        } catch (FileNotFoundException e) {\r\n            throw new RuntimeException(e.getMessage(), e);\r\n        } finally {\r\n            IOUtils.closeQuietly(inputStream);\r\n        }\r\n    }\r\n}\r\n\n```","title":"4.2.1OSS"},{"path":"4.2.2FTP.md","content":"```\npackage com.cms.util;\r\nimport java.io.BufferedInputStream;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.net.SocketException;\r\nimport org.apache.commons.io.IOUtils;\r\nimport org.apache.commons.lang.StringUtils;\r\nimport org.apache.commons.net.ftp.FTP;\r\nimport org.apache.commons.net.ftp.FTPClient;\r\nimport org.apache.commons.net.ftp.FTPReply;\r\n/**\r\n *\r\n * ftp 工具类\r\n */\r\npublic class FtpUtils {\r\n\r\n    public static void upload(String path, File file, String contentType){\r\n        String host = \"\";        //主机IP\r\n        Integer port = 21;       //端口\r\n        String username = \"\";    //用户名\r\n        String password = \"\";    //密码\r\n        FTPClient ftpClient = new FTPClient();\r\n        InputStream inputStream = null;\r\n        try {\r\n            inputStream = new BufferedInputStream(new FileInputStream(file));\r\n            ftpClient.connect(host, port);\r\n            ftpClient.login(username, password);\r\n            ftpClient.setFileTransferMode(FTP.STREAM_TRANSFER_MODE);\r\n            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);\r\n            ftpClient.enterLocalPassiveMode();\r\n            if (FTPReply.isPositiveCompletion(ftpClient.getReplyCode())) {\r\n                String directory = StringUtils.substringBeforeLast(path, \"/\");\r\n                String filename = StringUtils.substringAfterLast(path, \"/\");\r\n                if (!ftpClient.changeWorkingDirectory(directory)) {\r\n                    String[] paths = StringUtils.split(directory, \"/\");\r\n                    String p = \"/\";\r\n                    ftpClient.changeWorkingDirectory(p);\r\n                    for (String s : paths) {\r\n                        p += s + \"/\";\r\n                        if (!ftpClient.changeWorkingDirectory(p)) {\r\n                            ftpClient.makeDirectory(s);\r\n                            ftpClient.changeWorkingDirectory(p);\r\n                        }\r\n                    }\r\n                }\r\n                ftpClient.storeFile(filename, inputStream);\r\n                ftpClient.logout();\r\n            }\r\n        } catch (SocketException e) {\r\n            throw new RuntimeException(e.getMessage(), e);\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e.getMessage(), e);\r\n        } finally {\r\n            IOUtils.closeQuietly(inputStream);\r\n            try {\r\n                if (ftpClient.isConnected()) {\r\n                    ftpClient.disconnect();\r\n                }\r\n            } catch (IOException e) {\r\n            }\r\n        }\r\n    }\r\n}\r\n\n```","title":"4.2.2FTP"},{"path":"4.3自动生成数据库表.md","content":"```\nimport java.io.File;\r\nimport java.lang.reflect.Method;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport com.jfinal.kit.PathKit;\r\nimport com.jfinal.plugin.activerecord.Db;\r\n\r\npublic class AutoCreateTable {\r\n\r\n    //扫描类\r\n    private static void scanClass(List<File> fileList, String path) {\r\n        File files[] = new File(path).listFiles();\r\n        if (null == files || files.length == 0)\r\n            return;\r\n        for (File file : files) {\r\n            if (file.isDirectory()) {\r\n                scanClass(fileList, file.getAbsolutePath());\r\n            } else if (file.getName().endsWith(\".class\")) {\r\n                fileList.add(file);\r\n            }\r\n        }\r\n    }\r\n    \r\n    //加载类\r\n    @SuppressWarnings(\"unchecked\")\r\n    private static <T> Class<T> classForName(String className) {\r\n        Class<T> clazz = null;\r\n        try {\r\n            ClassLoader cl = Thread.currentThread().getContextClassLoader();\r\n            clazz = (Class<T>) Class.forName(className, false, cl);\r\n        } catch (Throwable e) {\r\n        }\r\n        return clazz;\r\n    }\r\n    \r\n    //创建\r\n    public static void create(){\r\n        // TODO Auto-generated method stub\r\n        List<File> classFileList = new ArrayList<File>();\r\n        //entity class目录\r\n        scanClass(classFileList, PathKit.getRootClassPath()+\"/com/cms/autocode/c\");\r\n        for (File file : classFileList) {\r\n            int start = PathKit.getRootClassPath().length();\r\n            int end = file.toString().length() - 6; // 6 == \".class\".length();\r\n\r\n            String classFile = file.toString().substring(start + 1, end);\r\n            Class<?> clazz = classForName(classFile.replace(File.separator, \".\"));\r\n            \r\n            String tableName = clazz.getSimpleName().substring(4);\r\n            String firstName =  tableName.substring(0,1).toLowerCase();\r\n            \r\n            String endName = tableName.substring(1);\r\n            char [] chars = endName.toCharArray();\r\n            for(char c : chars){\r\n                if (c<97){\r\n                    firstName+=\"_\"+c;\r\n                }else{\r\n                    firstName+=c;\r\n                }\r\n            }\r\n            String sql = \" CREATE TABLE `cms_\"+firstName+\"` ( \"+\r\n                    \" `id`  bigint(20) NOT NULL AUTO_INCREMENT, \"+\r\n                    \" `createDate`  datetime NOT NULL, \"+\r\n                    \" `modifyDate`  datetime NOT NULL \";\r\n            Method[] methods = clazz.getDeclaredMethods();\r\n            for(Method method : methods){\r\n                String name = method.getName();\r\n                if(name.startsWith(\"get\")){\r\n                    name = name.substring(\"get\".length());\r\n                    String first = name.substring(0, 1);\r\n                    name = first.toLowerCase()+name.substring(1);\r\n                    if(name.equals(\"id\") || name.equals(\"createDate\") || name.equals(\"modifyDate\") || name.equals(\"siteId\")){\r\n                        continue;\r\n                    }else{\r\n                        Class<?> type = method.getReturnType();\r\n                        if(type.isAssignableFrom(String.class)){ //text,longtext 类型需自己去修改\r\n                            sql+=\" ,`\"+name+\"`  varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL \";\r\n                        }\r\n                        if(type.isAssignableFrom(Boolean.class)){\r\n                            sql+=\" ,`\"+name+\"`  bit(1) NULL \";\r\n                        }\r\n                        if(type.isAssignableFrom(Long.class)){\r\n                            sql+=\" ,`\"+name+\"`  bigint(20) NULL \";\r\n                        }\r\n                        if(type.isAssignableFrom(Date.class)){\r\n                            sql+=\" ,`\"+name+\"`  datetime NULL \";\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            sql+=\" ,PRIMARY KEY (`id`)\"+\") \"+\" ENGINE=InnoDB \"+\r\n                \" DEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci \"+\r\n                \" AUTO_INCREMENT=1 \"+\r\n                \" ROW_FORMAT=COMPACT \"+\r\n                \";\";\r\n            System.out.println(sql);\r\n            Db.update(sql);\r\n        }\r\n    }\r\n\r\n}\n```","title":"4.3自动生成数据库表"},{"path":"4.4防跨域过滤器.md","content":"```\nimport java.io.IOException;\r\nimport javax.servlet.Filter;\r\nimport javax.servlet.FilterChain;\r\nimport javax.servlet.FilterConfig;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.ServletRequest;\r\nimport javax.servlet.ServletResponse;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\npublic class CorsFilter implements Filter{\r\n\r\n    @Override\r\n    public void init(FilterConfig filterConfig) throws ServletException {\r\n        // TODO Auto-generated method stub\r\n        \r\n    }\r\n\r\n    @Override\r\n    public void doFilter(ServletRequest request, ServletResponse response,\r\n            FilterChain chain) throws IOException, ServletException {\r\n        // TODO Auto-generated method stub\r\n        ((HttpServletResponse)response).setHeader(\"Access-Control-Allow-Origin\", \"*\");\r\n        ((HttpServletResponse)response).setHeader(\"Access-Control-Allow-Credentials\", \"true\");\r\n        ((HttpServletResponse)response).setHeader(\"Access-Control-Allow-Methods\", \"POST, GET, HEAD, OPTIONS, DELETE\");\r\n        ((HttpServletResponse)response).setHeader(\"Access-Control-Max-Age\", \"3600\");\r\n        ((HttpServletResponse)response).setHeader(\"Access-Control-Allow-Headers\", \"Origin, Accept, x-auth-token, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers\");\r\n/*      response.setHeader(\"Access-Control-Allow-Headers\", \"x-requested-with, X-Auth-Token, Content-Type\");\r\n*/      chain.doFilter(request, response);\r\n    }\r\n\r\n    @Override\r\n    public void destroy() {\r\n        // TODO Auto-generated method stub\r\n        \r\n    }\r\n\r\n}\n```","title":"4.4防跨域过滤器"},{"path":"4.5伪静态.md","content":"(1) HtmlHandler\n```\n/**\r\n * HtmlHandler.\r\n */\r\npublic class HtmlHandler extends Handler {\r\n\t\r\n\tprivate String viewPostfix;\r\n\t\r\n\tpublic HtmlHandler() {\r\n\t\tviewPostfix = \".html\";\r\n\t}\r\n\t\r\n\tpublic HtmlHandler(String viewPostfix) {\r\n\t\tif (StrKit.isBlank(viewPostfix)) {\r\n\t\t\tthrow new IllegalArgumentException(\"viewPostfix can not be blank.\");\r\n\t\t}\r\n\t\tthis.viewPostfix = viewPostfix;\r\n\t}\r\n\t\r\n\tpublic void handle(String target, HttpServletRequest request, HttpServletResponse response, boolean[] isHandled) {\r\n\t\tif (\"/\".equals(target)) {\r\n\t\t\tnext.handle(target, request, response, isHandled);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (target.startsWith(\"/admin/\")) {\r\n\t\t\tnext.handle(target, request, response, isHandled);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (target.indexOf('.') == -1) {\r\n\t\t\tHandlerKit.renderError404(request, response, isHandled);\r\n\t\t\treturn ;\r\n\t\t}\r\n\t\t\r\n\t\tint index = target.lastIndexOf(viewPostfix);\r\n\t\tif (index != -1) {\r\n\t\t\ttarget = target.substring(0, index);\r\n\t\t}\r\n\t\tnext.handle(target, request, response, isHandled);\r\n\t}\r\n}\n```\n(2) CmsConfig中configHandler新增\n```\nme.add(new HtmlHandler(\".html\"));\n```\n(3) Content中getPath返回更改为\n```\nreturn JFinal.me().getContextPath()+\"/content/\"+getId()+\".html\";\r\n```\n(4) Category中getPath返回更改为\n```\n return JFinal.me().getContextPath()+\"/category/\"+getId()+\".html\";\r\n```\n(5) CategoryController中Integer pageNumber = getParaToInt(\"pageNumber\");更改为\n```\nInteger pageNumber = getParaToInt(1);\r\n```\n(6)模板分页更改参考\n分页标签：\n```\n#pagination(pageNumber = contentPage.pageNumber,totalPages = contentPage.totalPage,pattern = \"/category/\"+currentCategory.id)\r\n#include(\"page.html\")\r\n#end\n```\n分页模板：\n```\n<div class=\"page\">\r\n#if(totalPages>1)    \r\n    #if(hasPrevious)\r\n        <a href=\"#(pattern)-#(previousPageNumber).html\" class=\"page_prev\">&lt;</a>\r\n    #else\r\n        <span>&lt;</span>\r\n    #end\r\n    #for(segmentPageNumber : segment)\r\n        #if(segmentPageNumber != pageNumber)\r\n            <a href=\"#(pattern)-#(segmentPageNumber).html\">#(segmentPageNumber)</a>\r\n        #else\r\n            <a href=\"javascript:;\" class=\"page_num on\">#(segmentPageNumber)</a>\r\n        #end\r\n    #end\r\n    #if(hasNext)\r\n        <a href=\"#(pattern)-#(nextPageNumber).html\" class=\"page_next\">&gt;</a>\r\n    #else\r\n        <span>&gt;</span>\r\n    #end\r\n#end \r\n</div>\n```\n","title":"4.5伪静态"}]